using System;
using System.Collections.Generic;
using System.Linq;

class PoppingNumbers
{
    static void Main(string[] args)
    {
        int rows = 0, cols = 0, highestNumber = 0;
        bool playAgainstEnemy = false;

        // Prompt the player to choose the opponent
        while (true)
        {
            Console.Write("Do you want to play against Captain Not So Random (Y/N)? ");
            string opponentChoice = Console.ReadLine().Trim().ToUpper();
            if (opponentChoice == "Y")
            {
                playAgainstEnemy = true;
                break;
            }
            else if (opponentChoice == "N")
            {
                playAgainstEnemy = false;
                break;
            }
            else
            {
                Console.WriteLine("Invalid choice. Please enter Y or N.");
            }
        }

        // Prompt the player for the board size (rows and columns) with error handling
        while (true)
        {
            try
            {
                Console.Write("Enter the number of rows for the board (5-25): ");
                rows = int.Parse(Console.ReadLine());
                if (rows < 5 || rows > 25) throw new ArgumentOutOfRangeException("rows", "Rows must be between 5 and 25.");
                break;
            }
            catch (ArgumentOutOfRangeException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            catch (FormatException)
            {
                Console.WriteLine("Error: Invalid input format. Please enter a valid number.");
            }
        }

        while (true)
        {
            try
            {
                Console.Write("Enter the number of columns for the board (5-25): ");
                cols = int.Parse(Console.ReadLine());
                if (cols < 5 || cols > 25) throw new ArgumentOutOfRangeException("cols", "Columns must be between 5 and 25.");
                break;
            }
            catch (ArgumentOutOfRangeException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            catch (FormatException)
            {
                Console.WriteLine("Error: Invalid input format. Please enter a valid number.");
            }
        }

        while (true)
        {
            try
            {
                Console.Write("Enter the highest number to be used in the game (1-9): ");
                highestNumber = int.Parse(Console.ReadLine());
                if (highestNumber < 1 || highestNumber > 9) throw new ArgumentOutOfRangeException("highestNumber", "Highest number must be between 1 and 9.");
                break;
            }
            catch (ArgumentOutOfRangeException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            catch (FormatException)
            {
                Console.WriteLine("Error: Invalid input format. Please enter a valid number.");
            }
        }

        var numbers = Enumerable.Range(1, highestNumber).ToArray();

        // Initialize the game board and total score
        int[,] board = InitializeBoard(rows, cols);
        int playerScore = 0;
        int enemyScore = 0;

        // Initialize predictor positions
        var predictorPositions = new List<(int, int)>();

        // Main game loop
        bool playerTurnFirstMove = true;
        while (!IsBoardFull(board))
        {
            // Display the current state of the board and the player's score
            PrintBoard(board, playerScore, enemyScore, predictorPositions);

            // Player's turn to place a number on the board
            Console.WriteLine("Player's Turn:");
            PlayerTurn(board, numbers, predictorPositions);

            // Check for matches and update the player's score
            playerScore += CheckMatches(board);

            // If the board is full, the game ends
            if (IsBoardFull(board))
                break;

            // Opponent's turn
            if (playAgainstEnemy)
            {
                Console.WriteLine("Captain Not So Random's Turn:");
                predictorPositions = CaptainNotSoRandomTurn(board, numbers, predictorPositions, playerTurnFirstMove);

                // Check for matches and update the opponent's score
                enemyScore += CheckMatches(board);

                PrintBoard(board, playerScore, enemyScore, predictorPositions);

                Console.WriteLine("Robot's Turn:");
                predictorPositions = ComputerTurn(board, numbers);
            }
            else
            {
                Console.WriteLine("Computer's Turn:");
                predictorPositions = ComputerTurn(board, numbers);
            }

            // Check for matches and update the opponent's score
            enemyScore += CheckMatches(board);

            playerTurnFirstMove = false; // After the first move by the player, this becomes false
        }

        // Display the final state of the board and the total scores
        PrintBoard(board, playerScore, enemyScore, predictorPositions);
        Console.WriteLine($"Game Over! Your total score is: {playerScore}");
        Console.WriteLine($"{(playAgainstEnemy ? "Captain Not So Random's" : "Computer's")} total score is: {enemyScore}");

        // Determine the winner
        if (playerScore > enemyScore)
            Console.WriteLine("Congratulations! You win!");
        else if (playerScore < enemyScore)
            Console.WriteLine($"{(playAgainstEnemy ? "Captain Not So Random" : "Computer")} wins! Better luck next time.");
        else
            Console.WriteLine("It's a tie!");
    }

    // Initializes the game board with the specified number of rows and columns
    static int[,] InitializeBoard(int rows, int cols)
    {
        return new int[rows, cols];
    }

    // Prints the current state of the board along with the player's and enemy's scores
    static void PrintBoard(int[,] board, int playerScore, int enemyScore, List<(int, int)> predictorPositions)
    {
        Console.Clear();
        Console.WriteLine($"Player Score: {playerScore} | {(enemyScore > 0 ? "Captain Not So Random's" : "Computer's")} Score: {enemyScore}");
        for (int i = 0; i < board.GetLength(0); i++)
        {
            for (int j = 0; j < board.GetLength(1); j++)
            {
                if (predictorPositions.Contains((i, j)))
                {
                    Console.Write("* ");
                }
                else
                {
                    PrintColoredNumber(board[i, j]);
                }
            }
            Console.WriteLine();
        }
        Console.WriteLine();
    }

    // Prints a number with a color
    static void PrintColoredNumber(int number)
    {
        switch (number)
        {
            case 1:
                Console.ForegroundColor = ConsoleColor.Red;
                break;
            case 2:
                Console.ForegroundColor = ConsoleColor.Green;
                break;
            case 3:
                Console.ForegroundColor = ConsoleColor.Blue;
                break;
            case 4:
                Console.ForegroundColor = ConsoleColor.Yellow;
                break;
            case 5:
                Console.ForegroundColor = ConsoleColor.Cyan;
                break;
            case 6:
                Console.ForegroundColor = ConsoleColor.Magenta;
                break;
            case 7:
                Console.ForegroundColor = ConsoleColor.DarkRed;
                break;
            case 8:
                Console.ForegroundColor = ConsoleColor.DarkGreen;
                break;
            case 9:
                Console.ForegroundColor = ConsoleColor.DarkBlue;
                break;
            default:
                Console.ForegroundColor = ConsoleColor.White;
                break;
        }
        Console.Write(number + " ");
        Console.ResetColor();
    }

    // Checks if the board is full (i.e., no empty spaces)
    static bool IsBoardFull(int[,] board)
    {
        foreach (int cell in board)
        {
            if (cell == 0)
                return false;
        }
        return true;
    }

    // Returns a list of empty positions on the board
    static List<(int, int)> GetEmptyPositions(int[,] board)
    {
        var emptyPositions = new List<(int, int)>();
        for (int i = 0; i < board.GetLength(0); i++)
        {
            for (int j = 0; j < board.GetLength(1); j++)
            {
                if (board[i, j] == 0)
                    emptyPositions.Add((i, j));
            }
        }
        return emptyPositions;
    }

    // Places a number at the specified position on the board
    static void PlaceNumber(int[,] board, int row, int col, int number)
    {
        board[row, col] = number;
    }

    // Checks for matches of three or more identical numbers in a row or column and clears them
    static int CheckMatches(int[,] board)
    {
        void ClearCells(HashSet<(int, int)> cells)
        {
            foreach (var cell in cells)
            {
                board[cell.Item1, cell.Item2] = 0;
            }
        }

        HashSet<(int, int)> FindMatches()
        {
            var matches = new HashSet<(int, int)>();
            for (int r = 0; r < board.GetLength(0); r++)
            {
                for (int c = 0; c < board.GetLength(1); c++)
                {
                    if (board[r, c] != 0)
                    {
                        // Check horizontal, vertical, and diagonal matches
                        if (c <= board.GetLength(1) - 3 && board[r, c] == board[r, c + 1] && board[r, c] == board[r, c + 2])
                        {
                            matches.Add((r, c));
                            matches.Add((r, c + 1));
                            matches.Add((r, c + 2));
                            // Additional matches for longer rows
                            if (c <= board.GetLength(1) - 4 && board[r, c] == board[r, c + 3])
                                matches.Add((r, c + 3));
                            if (c <= board.GetLength(1) - 5 && board[r, c] == board[r, c + 4])
                                matches.Add((r, c + 4));
                        }
                        if (r <= board.GetLength(0) - 3 && board[r, c] == board[r + 1, c] && board[r, c] == board[r + 2, c])
                        {
                            matches.Add((r, c));
                            matches.Add((r + 1, c));
                            matches.Add((r + 2, c));
                            // Additional matches for longer columns
                            if (r <= board.GetLength(0) - 4 && board[r, c] == board[r + 3, c])
                                matches.Add((r + 3, c));
                            if (r <= board.GetLength(0) - 5 && board[r, c] == board[r + 4, c])
                                matches.Add((r + 4, c));
                        }
                        if (r <= board.GetLength(0) - 3 && c <= board.GetLength(1) - 3 && board[r, c] == board[r + 1, c + 1] && board[r, c] == board[r + 2, c + 2])
                        {
                            matches.Add((r, c));
                            matches.Add((r + 1, c + 1));
                            matches.Add((r + 2, c + 2));
                            // Additional matches for longer diagonals
                            if (r <= board.GetLength(0) - 4 && c <= board.GetLength(1) - 4 && board[r, c] == board[r + 3, c + 3])
                                matches.Add((r + 3, c + 3));
                            if (r <= board.GetLength(0) - 5 && c <= board.GetLength(1) - 5 && board[r, c] == board[r + 4, c + 4])
                                matches.Add((r + 4, c + 4));
                        }
                        if (r <= board.GetLength(0) - 3 && c >= 2 && board[r, c] == board[r + 1, c - 1] && board[r, c] == board[r + 2, c - 2])
                        {
                            matches.Add((r, c));
                            matches.Add((r + 1, c - 1));
                            matches.Add((r + 2, c - 2));
                            // Additional matches for longer diagonals
                            if (r <= board.GetLength(0) - 4 && c >= 3 && board[r, c] == board[r + 3, c - 3])
                                matches.Add((r + 3, c - 3));
                            if (r <= board.GetLength(0) - 5 && c >= 4 && board[r, c] == board[r + 4, c - 4])
                                matches.Add((r + 4, c - 4));
                        }
                    }
                }
            }
            return matches;
        }

        var matches = FindMatches();
        int score = 0;
        // Calculate score based on the number of matches
        if (matches.Count == 3) score = 100;
        else if (matches.Count == 4) score = 200;
        else if (matches.Count >= 5) score = 500;
        ClearCells(matches);
        return score;
    }

    // Handles the player's turn to choose a position and place a number on the board
    static void PlayerTurn(int[,] board, int[] numbers, List<(int, int)> predictorPositions)
    {
        while (true)
        {
            try
            {
                Console.WriteLine("Enter the row and column to place your number (e.g., 1 2): ");
                var input = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();
                if (input.Length != 2)
                {
                    throw new FormatException("You must enter both row and column.");
                }
                int row = input[0] - 1;
                int col = input[1] - 1;

                if (board[row, col] == 0 || predictorPositions.Contains((row, col)))
                {
                    Console.WriteLine("Enter the number to place: ");
                    int number = int.Parse(Console.ReadLine());
                    if (numbers.Contains(number))
                    {
                        PlaceNumber(board, row, col, number);
                        predictorPositions.Remove((row, col)); // Remove from predictor positions if player places number
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Invalid number. Try again.");
                    }
                }
                else
                {
                    Console.WriteLine("Position already occupied. Try again.");
                }
            }
            catch (FormatException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (Exception)
            {
                Console.WriteLine("Invalid input. Please try again.");
            }
        }
    }

    // Handles the computer's turn to place random numbers on the board
    static List<(int, int)> ComputerTurn(int[,] board, int[] numbers)
    {
        var rand = new Random();
        var emptyPositions = GetEmptyPositions(board);

        var predictorPositions = new List<(int, int)>();

        // Place random numbers
        for (int i = 0; i < 3; i++) // Adjusted to place three numbers per turn
        {
            if (emptyPositions.Count > 0)
            {
                var (row, col) = emptyPositions[rand.Next(emptyPositions.Count)];
                var number = numbers[rand.Next(numbers.Length)];
                PlaceNumber(board, row, col, number);
                predictorPositions.Add((row, col)); // Add predictor position
                emptyPositions.Remove((row, col));
            }
        }

        return predictorPositions;
    }

    // Handles the enemy's turn to place strategic numbers on the board
    static List<(int, int)> CaptainNotSoRandomTurn(int[,] board, int[] numbers, List<(int, int)> predictorPositions, bool firstMove)
    {
        var rand = new Random();
        var emptyPositions = GetEmptyPositions(board);

        // Clear previous predictor positions
        predictorPositions.Clear();

        if (firstMove)
        {
            // If it's the first move, place a number randomly
            var (row, col) = emptyPositions[rand.Next(emptyPositions.Count)];
            var number = numbers[rand.Next(numbers.Length)];
            PlaceNumber(board, row, col, number);
        }
        else
        {
            // Find the best positions to place the numbers
            var bestPositions = FindBestPositions(board, numbers);

            // Place numbers at best positions
            foreach (var (row, col) in bestPositions)
            {
                if (board[row, col] == 0)
                {
                    var number = numbers[rand.Next(numbers.Length)];
                    PlaceNumber(board, row, col, number);
                    break; // Place only one number per turn
                }
            }
        }

        return predictorPositions;
    }

    // Finds the best positions to place numbers based on potential matches and blocking the player
    static List<(int, int)> FindBestPositions(int[,] board, int[] numbers)
    {
        var bestPositions = new List<(int, int)>();
        int bestScore = 0;

        for (int r = 0; r < board.GetLength(0); r++)
        {
            for (int c = 0; c < board.GetLength(1); c++)
            {
                if (board[r, c] == 0)
                {
                    foreach (var number in numbers)
                    {
                        // Evaluate for Captain Not So Random's potential
                        board[r, c] = number;
                        int score = EvaluatePosition(board, r, c);
                        board[r, c] = 0;

                        if (score > bestScore)
                        {
                            bestScore = score;
                            bestPositions.Clear();
                            bestPositions.Add((r, c));
                        }
                        else if (score == bestScore)
                        {
                            bestPositions.Add((r, c));
                        }

                        // Evaluate for blocking player's potential
                        board[r, c] = number == 0 ? 1 : 0; // Simulate the player's move with a different number
                        score = EvaluatePosition(board, r, c);
                        board[r, c] = 0;

                        if (score > bestScore)
                        {
                            bestScore = score;
                            bestPositions.Clear();
                            bestPositions.Add((r, c));
                        }
                        else if (score == bestScore)
                        {
                            bestPositions.Add((r, c));
                        }
                    }
                }
            }
        }

        return bestPositions;
    }

    // Evaluates a position to determine its potential score based on potential matches
    static int EvaluatePosition(int[,] board, int row, int col)
    {
        int score = 0;
        int number = board[row, col];

        // Check horizontal potential
        for (int i = Math.Max(0, col - 2); i <= Math.Min(board.GetLength(1) - 3, col); i++)
        {
            if (board[row, i] == number && board[row, i + 1] == number && board[row, i + 2] == number)
            {
                score++;
            }
        }

        // Check vertical potential
        for (int i = Math.Max(0, row - 2); i <= Math.Min(board.GetLength(0) - 3, row); i++)
        {
            if (board[i, col] == number && board[i + 1, col] == number && board[i + 2, col] == number)
            {
                score++;
            }
        }

        // Check diagonal potential
        for (int i = -2; i <= 0; i++)
        {
            if (row + i >= 0 && col + i >= 0 && row + i + 2 < board.GetLength(0) && col + i + 2 < board.GetLength(1))
            {
                if (board[row + i, col + i] == number && board[row + i + 1, col + i + 1] == number && board[row + i + 2, col + i + 2] == number)
                {
                    score++;
                }
            }

            if (row + i >= 0 && col - i - 2 >= 0 && row + i + 2 < board.GetLength(0) && col - i < board.GetLength(1))
            {
                if (board[row + i, col - i] == number && board[row + i + 1, col - i - 1] == number && board[row + i + 2, col - i - 2] == number)
                {
                    score++;
                }
            }
        }

        return score;
    }
}
